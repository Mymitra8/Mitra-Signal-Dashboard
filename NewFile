import React, { useState, useEffect, useRef } from 'react';
import { Shield, Wifi, Server, AlertTriangle, CheckCircle, XCircle, Play, Pause, RotateCcw } from 'lucide-react';

const SecurityDashboard = () => {
  const [engineStatus, setEngineStatus] = useState('stopped');
  const [systemStatus, setSystemStatus] = useState('initializing');
  const [scanResults, setScanResults] = useState([]);
  const [networkStats, setNetworkStats] = useState({
    activeConnections: 0,
    packetsScanned: 0,
    threatsDetected: 0,
    uptime: 0
  });
  const [logs, setLogs] = useState([]);
  const [autoScan, setAutoScan] = useState(false);
  const intervalRef = useRef(null);
  const logRef = useRef(null);

  // Initialize system
  useEffect(() => {
    const initTimer = setTimeout(() => {
      setSystemStatus('ready');
      addLog('System initialization complete', 'info');
    }, 2000);

    addLog('System initializing...', 'info');
    return () => clearTimeout(initTimer);
  }, []);

  // Auto-scroll logs
  useEffect(() => {
    if (logRef.current) {
      logRef.current.scrollTop = logRef.current.scrollHeight;
    }
  }, [logs]);

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev.slice(-49), { timestamp, message, type }]);
  };

  const generateMockScanResult = () => {
    const ips = ['192.168.1.', '10.0.0.', '172.16.0.'];
    const ports = [22, 80, 443, 21, 25, 53, 110, 143, 993, 995];
    const statuses = ['open', 'closed', 'filtered'];
    const services = ['SSH', 'HTTP', 'HTTPS', 'FTP', 'SMTP', 'DNS', 'POP3', 'IMAP'];
    
    const ip = ips[Math.floor(Math.random() * ips.length)] + (Math.floor(Math.random() * 254) + 1);
    const port = ports[Math.floor(Math.random() * ports.length)];
    const status = statuses[Math.floor(Math.random() * statuses.length)];
    const service = services[Math.floor(Math.random() * services.length)];
    const threat = Math.random() > 0.8;
    
    return {
      id: Date.now() + Math.random(),
      ip,
      port,
      service,
      status,
      threat,
      timestamp: new Date().toLocaleTimeString(),
      response: Math.floor(Math.random() * 100) + 'ms'
    };
  };

  const startEngine = () => {
    if (systemStatus !== 'ready') {
      addLog('Cannot start engine: System not ready', 'error');
      return;
    }

    setEngineStatus('running');
    addLog('Scanning engine started', 'success');
    
    // Start generating scan results
    intervalRef.current = setInterval(() => {
      const result = generateMockScanResult();
      setScanResults(prev => [result, ...prev.slice(0, 19)]); // Keep last 20 results
      
      // Update network stats
      setNetworkStats(prev => ({
        activeConnections: prev.activeConnections + (Math.random() > 0.5 ? 1 : -1),
        packetsScanned: prev.packetsScanned + Math.floor(Math.random() * 10) + 1,
        threatsDetected: result.threat ? prev.threatsDetected + 1 : prev.threatsDetected,
        uptime: prev.uptime + 1
      }));

      if (result.threat) {
        addLog(`Threat detected on ${result.ip}:${result.port}`, 'warning');
      } else if (result.status === 'open') {
        addLog(`Open port found: ${result.ip}:${result.port} (${result.service})`, 'info');
      }
    }, autoScan ? 1000 : 2000);
  };

  const stopEngine = () => {
    setEngineStatus('stopped');
    addLog('Scanning engine stopped', 'warning');
    
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  };

  const resetSystem = () => {
    stopEngine();
    setScanResults([]);
    setNetworkStats({
      activeConnections: 0,
      packetsScanned: 0,
      threatsDetected: 0,
      uptime: 0
    });
    setLogs([]);
    setSystemStatus('initializing');
    addLog('System reset initiated', 'info');
    
    setTimeout(() => {
      setSystemStatus('ready');
      addLog('System reset complete', 'success');
    }, 1500);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'running': return 'text-green-500';
      case 'stopped': return 'text-red-500';
      case 'ready': return 'text-blue-500';
      case 'initializing': return 'text-yellow-500';
      default: return 'text-gray-500';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'running': return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'stopped': return <XCircle className="w-5 h-5 text-red-500" />;
      case 'ready': return <CheckCircle className="w-5 h-5 text-blue-500" />;
      case 'initializing': return <RotateCcw className="w-5 h-5 text-yellow-500 animate-spin" />;
      default: return <XCircle className="w-5 h-5 text-gray-500" />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-3">
            <Shield className="w-8 h-8 text-blue-500" />
            <h1 className="text-3xl font-bold">Security Monitoring Dashboard</h1>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              {getStatusIcon(systemStatus)}
              <span className={`font-medium ${getStatusColor(systemStatus)}`}>
                System: {systemStatus.toUpperCase()}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              {getStatusIcon(engineStatus)}
              <span className={`font-medium ${getStatusColor(engineStatus)}`}>
                Engine: {engineStatus.toUpperCase()}
              </span>
            </div>
          </div>
        </div>

        {/* Control Panel */}
        <div className="bg-gray-800 rounded-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold mb-4">Control Panel</h2>
            <div className="flex items-center space-x-2">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={autoScan}
                  onChange={(e) => setAutoScan(e.target.checked)}
                  className="rounded"
                />
                <span className="text-sm">Auto Scan</span>
              </label>
            </div>
          </div>
          <div className="flex space-x-4">
            <button
              onClick={startEngine}
              disabled={engineStatus === 'running' || systemStatus !== 'ready'}
              className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-4 py-2 rounded-lg font-medium transition-colors"
            >
              <Play className="w-4 h-4" />
              <span>Start Engine</span>
            </button>
            <button
              onClick={stopEngine}
              disabled={engineStatus === 'stopped'}
              className="flex items-center space-x-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-4 py-2 rounded-lg font-medium transition-colors"
            >
              <Pause className="w-4 h-4" />
              <span>Stop Engine</span>
            </button>
            <button
              onClick={resetSystem}
              className="flex items-center space-x-2 bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded-lg font-medium transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
              <span>Reset</span>
            </button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
          <div className="bg-gray-800 rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Active Connections</p>
                <p className="text-2xl font-bold">{Math.max(0, networkStats.activeConnections)}</p>
              </div>
              <Wifi className="w-8 h-8 text-blue-500" />
            </div>
          </div>
          <div className="bg-gray-800 rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Packets Scanned</p>
                <p className="text-2xl font-bold">{networkStats.packetsScanned.toLocaleString()}</p>
              </div>
              <Server className="w-8 h-8 text-green-500" />
            </div>
          </div>
          <div className="bg-gray-800 rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Threats Detected</p>
                <p className="text-2xl font-bold">{networkStats.threatsDetected}</p>
              </div>
              <AlertTriangle className="w-8 h-8 text-red-500" />
            </div>
          </div>
          <div className="bg-gray-800 rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Uptime (seconds)</p>
                <p className="text-2xl font-bold">{networkStats.uptime}</p>
              </div>
              <CheckCircle className="w-8 h-8 text-purple-500" />
            </div>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Scan Results */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Recent Scan Results</h3>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {scanResults.length === 0 ? (
                <div className="text-gray-400 text-center py-8">
                  <Server className="w-12 h-12 mx-auto mb-3 opacity-50" />
                  <p>No scan results yet</p>
                  <p className="text-sm">Start the engine to begin scanning</p>
                </div>
              ) : (
                scanResults.map((result) => (
                  <div
                    key={result.id}
                    className={`p-3 rounded-lg border-l-4 ${
                      result.threat 
                        ? 'bg-red-900/20 border-red-500' 
                        : result.status === 'open' 
                        ? 'bg-yellow-900/20 border-yellow-500'
                        : 'bg-gray-700 border-gray-500'
                    }`}
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <p className="font-medium">
                          {result.ip}:{result.port}
                          {result.threat && <span className="ml-2 text-red-400 text-xs">⚠ THREAT</span>}
                        </p>
                        <p className="text-sm text-gray-400">
                          {result.service} • {result.status} • {result.response}
                        </p>
                      </div>
                      <span className="text-xs text-gray-500">{result.timestamp}</span>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* System Logs */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4">System Logs</h3>
            <div ref={logRef} className="space-y-2 max-h-96 overflow-y-auto font-mono text-sm">
              {logs.map((log, index) => (
                <div key={index} className="flex items-start space-x-3">
                  <span className="text-gray-500 flex-shrink-0">{log.timestamp}</span>
                  <span className={`flex-1 ${
                    log.type === 'error' ? 'text-red-400' :
                    log.type === 'warning' ? 'text-yellow-400' :
                    log.type === 'success' ? 'text-green-400' :
                    'text-gray-300'
                  }`}>
                    {log.message}
                  </span>
                </div>
              ))}
              {logs.length === 0 && (
                <div className="text-gray-500 text-center py-8">
                  No logs yet
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SecurityDashboard;
